/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dice } from "./Dice";
import { DiceCountArgs } from "./DiceCountArgs";
import { DiceFindManyArgs } from "./DiceFindManyArgs";
import { DiceFindUniqueArgs } from "./DiceFindUniqueArgs";
import { CreateDiceArgs } from "./CreateDiceArgs";
import { UpdateDiceArgs } from "./UpdateDiceArgs";
import { DeleteDiceArgs } from "./DeleteDiceArgs";
import { DiceService } from "../dice.service";
@graphql.Resolver(() => Dice)
export class DiceResolverBase {
  constructor(protected readonly service: DiceService) {}

  async _diceItemsMeta(
    @graphql.Args() args: DiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dice])
  async diceItems(@graphql.Args() args: DiceFindManyArgs): Promise<Dice[]> {
    return this.service.diceItems(args);
  }

  @graphql.Query(() => Dice, { nullable: true })
  async dice(@graphql.Args() args: DiceFindUniqueArgs): Promise<Dice | null> {
    const result = await this.service.dice(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dice)
  async createDice(@graphql.Args() args: CreateDiceArgs): Promise<Dice> {
    return await this.service.createDice({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Dice)
  async updateDice(@graphql.Args() args: UpdateDiceArgs): Promise<Dice | null> {
    try {
      return await this.service.updateDice({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dice)
  async deleteDice(@graphql.Args() args: DeleteDiceArgs): Promise<Dice | null> {
    try {
      return await this.service.deleteDice(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
