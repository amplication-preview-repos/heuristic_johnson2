/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DiceService } from "../dice.service";
import { DiceCreateInput } from "./DiceCreateInput";
import { Dice } from "./Dice";
import { DiceFindManyArgs } from "./DiceFindManyArgs";
import { DiceWhereUniqueInput } from "./DiceWhereUniqueInput";
import { DiceUpdateInput } from "./DiceUpdateInput";

export class DiceControllerBase {
  constructor(protected readonly service: DiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dice })
  async createDice(@common.Body() data: DiceCreateInput): Promise<Dice> {
    return await this.service.createDice({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        faceValue: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dice] })
  @ApiNestedQuery(DiceFindManyArgs)
  async diceItems(@common.Req() request: Request): Promise<Dice[]> {
    const args = plainToClass(DiceFindManyArgs, request.query);
    return this.service.diceItems({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        faceValue: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dice(
    @common.Param() params: DiceWhereUniqueInput
  ): Promise<Dice | null> {
    const result = await this.service.dice({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        faceValue: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDice(
    @common.Param() params: DiceWhereUniqueInput,
    @common.Body() data: DiceUpdateInput
  ): Promise<Dice | null> {
    try {
      return await this.service.updateDice({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          faceValue: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dice })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDice(
    @common.Param() params: DiceWhereUniqueInput
  ): Promise<Dice | null> {
    try {
      return await this.service.deleteDice({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          faceValue: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
